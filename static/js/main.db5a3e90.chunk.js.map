{"version":3,"sources":["components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["winningCombinations","board","Array","from","keys","cells","document","getElementsByClassName","GameContainer","props","state","message","console","log","this","round","matchResult","player","playerMove","setState","myArray","index","playerValue","i","length","innerHTML","plays","reduce","a","e","concat","gameWon","entries","every","elem","indexOf","tmp_arr","didWin","position","Math","floor","random","value","updateBoard","clearUnusedSquares","id","splice","runGame","className","style","styles","container","Component","minHeight","width","strong","fontWeight","App","strategy","myInterval","setInterval","prevState","clearInterval","ref","playerStrategy","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db5a3e90.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../table.css';\r\n\r\nconst PlayerX = {\r\n    value: \"X\",\r\n}\r\n\r\nconst PlayerO = {\r\n    value: \"O\",\r\n}\r\n\r\n//const playerStrategy = {\r\n//    1: \"horizontal\",\r\n//    2: \"vertical\",\r\n//    3: \"diagonal\",\r\n//    4: \"random\"\r\n//}\r\n\r\nconst playerStrategy = {\r\n    1: \"vertical\",\r\n    2: \"vertical\",\r\n    3: \"vertical\",\r\n    4: \"vertical\"\r\n}\r\n\r\nconst winningCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n];\r\n\r\nlet board = Array.from(Array(9).keys());\r\nconst cells = document.getElementsByClassName('cell');\r\n\r\n\r\nexport class GameContainer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            message: \"Board Created, The game will start with player X\"\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log( this.props.round + \" mounted\")\r\n        this.matchResult = \"\";\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        //console.log(this.props.round + \" round\");\r\n        board = Array.from(Array(9).keys());\r\n    }\r\n\r\n    getPlayer(){\r\n        const player = this.state.playerMove;\r\n        this.setState({ playerMove: (player+1) % 2 });\r\n        return player;\r\n    }\r\n\r\n    checkAvailability(myArray, index){\r\n        if (myArray[index] === null){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateBoard(playerValue){\r\n        //console.log(cells)\r\n        for (let i = 0; i < cells.length; i++) {\r\n            cells[i].innerHTML = board[i];\r\n        }\r\n\r\n        let plays = board.reduce((a, e, i) => {\r\n            return (e === playerValue) ? a.concat(i) : a;\r\n          }, []);\r\n          let gameWon = false;\r\n          for (let [index, win] of winningCombinations.entries()) {\r\n            if (win.every(elem => plays.indexOf(elem) > -1)) { \r\n              gameWon = { \r\n                index: index,\r\n                playerValue: playerValue\r\n              };\r\n              break;\r\n            }\r\n          }\r\n          return gameWon;\r\n    }\r\n\r\n    clearUnusedSquares(){\r\n        for (let i = 0; i < board.length; i++) {\r\n            if(typeof board[i] === \"number\"){\r\n                board[i] = \"\";\r\n            }\r\n            for (let i = 0; i < cells.length; i++) {\r\n                cells[i].innerHTML = board[i];\r\n            }\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    runGame(){\r\n        let index = 0;\r\n        let tmp_arr = Array.from(Array(9).keys());\r\n        let didWin = false;\r\n        while(tmp_arr.length > 0){\r\n            let position = tmp_arr[Math.floor(Math.random() * tmp_arr.length)];     //rand index/position\r\n            //console.log(position);\r\n            const value = index % 2 === 0 ? \"X\" : \"O\";\r\n            board[position] = value;\r\n\r\n            //checkIfWon\r\n            didWin = this.updateBoard(value)\r\n            if(didWin){\r\n                console.log(\"Player \" + value + \" won\");\r\n                this.matchResult = \"PLAYER \" + value + \" WON\";\r\n                //clear the board\r\n                this.clearUnusedSquares()\r\n                break;\r\n            } \r\n\r\n            index += 1;\r\n            let id = tmp_arr.indexOf(position);\r\n            tmp_arr.splice(id, 1);\r\n        }\r\n        if(!didWin){\r\n            console.log(\"DRAW\");\r\n            this.matchResult = \"GAME ENDS WITH A DRAW\";\r\n        }\r\n        console.log(\"board is: \" + board);\r\n       \r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.round + \" round\");\r\n        this.runGame();\r\n\r\n        return (\r\n            <div>\r\n               <h2>Tic Tac Toe</h2>\r\n               <div className=\"container\" style={styles.container}>\r\n                   <p>Round: {this.props.round}</p>\r\n                    <table>\r\n                        <tr className=\"row\" id=\"0\">\r\n                            <td className=\"cell\" id=\"0\"></td>\r\n                            <td className=\"cell\" id=\"1\"></td>\r\n                            <td className=\"cell\" id=\"2\"></td>\r\n                        </tr>\r\n                        <tr className=\"row\" id=\"1\">\r\n                            <td className=\"cell\" id=\"3\"></td>\r\n                            <td className=\"cell\" id=\"4\"></td>\r\n                            <td className=\"cell\" id=\"5\"></td>\r\n                        </tr>\r\n                        <tr className=\"row\" id=\"2\">\r\n                            <td className=\"cell\" id=\"6\"></td>\r\n                            <td className=\"cell\" id=\"7\"></td>\r\n                            <td className=\"cell\" id=\"8\"></td>\r\n                        </tr>    \r\n                    </table> \r\n                    <h2>{\r\n                        this.props.round === 0 ? this.state.message : this.matchResult\r\n                        }\r\n                    </h2> \r\n                    \r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst styles = {\r\n    container: {\r\n        minHeight: 600 + \"px\",\r\n        width: 100+\"%\",\r\n    },\r\n    strong: {\r\n        fontWeight: 800,\r\n    }\r\n    \r\n}\r\n\r\nexport default GameContainer\r\n","import React from 'react';\nimport './App.css';\nimport GameContainer from './components/GameContainer'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      round: 0,\n      strategy: 0\n    }\n  }\n  \n\n  componentDidMount(){\n    this.myInterval = setInterval(() => {\n      this.setState(prevState => ({\n        round: prevState.round + 1,\n        strategy: Math.floor(Math.random() * 4) + 1,\n      }))\n    }, 2000)\n\n    \n\n  }\n  \n  componentWillUnmount(){\n    clearInterval(this.myInterval);\n  }\n  \n  render(){\n\n    return (\n      <div className=\"App\" ref=\"game\">\n        <GameContainer round={this.state.round} playerStrategy={this.state.strategy} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}